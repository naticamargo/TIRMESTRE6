/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.jdbc;

import edu.co.sena.dao.*;
import edu.co.sena.factory.*;
import edu.co.sena.dto.*;
import edu.co.sena.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class DepartamentoDaoImpl extends AbstractDAO implements DepartamentoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( DepartamentoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idDEPARTAMENTO, NOMBRE_DEPARAMENTO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idDEPARTAMENTO, NOMBRE_DEPARAMENTO ) VALUES ( ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idDEPARTAMENTO = ?, NOMBRE_DEPARAMENTO = ? WHERE idDEPARTAMENTO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idDEPARTAMENTO = ?";

	/** 
	 * Index of column idDEPARTAMENTO
	 */
	protected static final int COLUMN_ID_D_E_P_A_R_T_A_M_E_N_T_O = 1;

	/** 
	 * Index of column NOMBRE_DEPARAMENTO
	 */
	protected static final int COLUMN_NOMBRE_DEPARAMENTO = 2;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 2;

	/** 
	 * Index of primary-key column idDEPARTAMENTO
	 */
	protected static final int PK_COLUMN_ID_D_E_P_A_R_T_A_M_E_N_T_O = 1;

	/** 
	 * Inserts a new row in the departamento table.
	 */
	public DepartamentoPk insert(Departamento dto) throws DepartamentoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdDEPARTAMENTOModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "idDEPARTAMENTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreDeparamentoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_DEPARAMENTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdDEPARTAMENTOModified()) {
				stmt.setInt( index++, dto.getIdDEPARTAMENTO() );
			}
		
			if (dto.isNombreDeparamentoModified()) {
				stmt.setString( index++, dto.getNombreDeparamento() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new DepartamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the departamento table.
	 */
	public void update(DepartamentoPk pk, Departamento dto) throws DepartamentoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdDEPARTAMENTOModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "idDEPARTAMENTO=?" );
				modified=true;
			}
		
			if (dto.isNombreDeparamentoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_DEPARAMENTO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE idDEPARTAMENTO=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdDEPARTAMENTOModified()) {
				stmt.setInt( index++, dto.getIdDEPARTAMENTO() );
			}
		
			if (dto.isNombreDeparamentoModified()) {
				stmt.setString( index++, dto.getNombreDeparamento() );
			}
		
			stmt.setInt( index++, pk.getIdDEPARTAMENTO() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new DepartamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the departamento table.
	 */
	public void delete(DepartamentoPk pk) throws DepartamentoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdDEPARTAMENTO() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new DepartamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the departamento table that matches the specified primary-key value.
	 */
	public Departamento findByPrimaryKey(DepartamentoPk pk) throws DepartamentoDaoException
	{
		return findByPrimaryKey( pk.getIdDEPARTAMENTO() );
	}

	/** 
	 * Returns all rows from the departamento table that match the criteria 'idDEPARTAMENTO = :idDEPARTAMENTO'.
	 */
	public Departamento findByPrimaryKey(int idDEPARTAMENTO) throws DepartamentoDaoException
	{
		Departamento ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idDEPARTAMENTO = ?", new Object[] {  new Integer(idDEPARTAMENTO) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the departamento table that match the criteria ''.
	 */
	public Departamento[] findAll() throws DepartamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idDEPARTAMENTO", null );
	}

	/** 
	 * Returns all rows from the departamento table that match the criteria 'idDEPARTAMENTO = :idDEPARTAMENTO'.
	 */
	public Departamento[] findWhereIdDEPARTAMENTOEquals(int idDEPARTAMENTO) throws DepartamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idDEPARTAMENTO = ? ORDER BY idDEPARTAMENTO", new Object[] {  new Integer(idDEPARTAMENTO) } );
	}

	/** 
	 * Returns all rows from the departamento table that match the criteria 'NOMBRE_DEPARAMENTO = :nombreDeparamento'.
	 */
	public Departamento[] findWhereNombreDeparamentoEquals(String nombreDeparamento) throws DepartamentoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_DEPARAMENTO = ? ORDER BY NOMBRE_DEPARAMENTO", new Object[] { nombreDeparamento } );
	}

	/**
	 * Method 'DepartamentoDaoImpl'
	 * 
	 */
	public DepartamentoDaoImpl()
	{
	}

	/**
	 * Method 'DepartamentoDaoImpl'
	 * 
	 * @param userConn
	 */
	public DepartamentoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tennisshop.departamento";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Departamento fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Departamento dto = new Departamento();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Departamento[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Departamento dto = new Departamento();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Departamento ret[] = new Departamento[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Departamento dto, ResultSet rs) throws SQLException
	{
		dto.setIdDEPARTAMENTO( rs.getInt( COLUMN_ID_D_E_P_A_R_T_A_M_E_N_T_O ) );
		dto.setNombreDeparamento( rs.getString( COLUMN_NOMBRE_DEPARAMENTO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Departamento dto)
	{
		dto.setIdDEPARTAMENTOModified( false );
		dto.setNombreDeparamentoModified( false );
	}

	/** 
	 * Returns all rows from the departamento table that match the specified arbitrary SQL statement
	 */
	public Departamento[] findByDynamicSelect(String sql, Object[] sqlParams) throws DepartamentoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new DepartamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the departamento table that match the specified arbitrary SQL statement
	 */
	public Departamento[] findByDynamicWhere(String sql, Object[] sqlParams) throws DepartamentoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new DepartamentoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
