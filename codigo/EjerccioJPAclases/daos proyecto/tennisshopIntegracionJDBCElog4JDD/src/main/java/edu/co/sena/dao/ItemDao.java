/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.dao;

import edu.co.sena.dto.*;
import edu.co.sena.exceptions.*;

public interface ItemDao
{
	/** 
	 * Inserts a new row in the item table.
	 */
	public ItemPk insert(Item dto) throws ItemDaoException;

	/** 
	 * Updates a single row in the item table.
	 */
	public void update(ItemPk pk, Item dto) throws ItemDaoException;

	/** 
	 * Deletes a single row in the item table.
	 */
	public void delete(ItemPk pk) throws ItemDaoException;

	/** 
	 * Returns the rows from the item table that matches the specified primary-key value.
	 */
	public Item findByPrimaryKey(ItemPk pk) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto AND PEDIDO_FACTURA_ID_FACTURA = :pedidoFacturaIdFactura'.
	 */
	public Item findByPrimaryKey(String productoIdProducto, int pedidoFacturaIdFactura) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria ''.
	 */
	public Item[] findAll() throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'PEDIDO_FACTURA_ID_FACTURA = :pedidoFacturaIdFactura'.
	 */
	public Item[] findByPedido(int pedidoFacturaIdFactura) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto'.
	 */
	public Item[] findByProducto(String productoIdProducto) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public Item[] findWhereCantidadEquals(int cantidad) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'VALOR_UNITARIO = :valorUnitario'.
	 */
	public Item[] findWhereValorUnitarioEquals(float valorUnitario) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'VALOR_TOTAL = :valorTotal'.
	 */
	public Item[] findWhereValorTotalEquals(float valorTotal) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto'.
	 */
	public Item[] findWhereProductoIdProductoEquals(String productoIdProducto) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the criteria 'PEDIDO_FACTURA_ID_FACTURA = :pedidoFacturaIdFactura'.
	 */
	public Item[] findWherePedidoFacturaIdFacturaEquals(int pedidoFacturaIdFactura) throws ItemDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the item table that match the specified arbitrary SQL statement
	 */
	public Item[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemDaoException;

	/** 
	 * Returns all rows from the item table that match the specified arbitrary SQL statement
	 */
	public Item[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemDaoException;

}
