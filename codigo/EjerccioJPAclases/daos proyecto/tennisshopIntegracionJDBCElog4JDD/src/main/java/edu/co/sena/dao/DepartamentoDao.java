/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.dao;

import edu.co.sena.dto.*;
import edu.co.sena.exceptions.*;

public interface DepartamentoDao
{
	/** 
	 * Inserts a new row in the departamento table.
	 */
	public DepartamentoPk insert(Departamento dto) throws DepartamentoDaoException;

	/** 
	 * Updates a single row in the departamento table.
	 */
	public void update(DepartamentoPk pk, Departamento dto) throws DepartamentoDaoException;

	/** 
	 * Deletes a single row in the departamento table.
	 */
	public void delete(DepartamentoPk pk) throws DepartamentoDaoException;

	/** 
	 * Returns the rows from the departamento table that matches the specified primary-key value.
	 */
	public Departamento findByPrimaryKey(DepartamentoPk pk) throws DepartamentoDaoException;

	/** 
	 * Returns all rows from the departamento table that match the criteria 'idDEPARTAMENTO = :idDEPARTAMENTO'.
	 */
	public Departamento findByPrimaryKey(int idDEPARTAMENTO) throws DepartamentoDaoException;

	/** 
	 * Returns all rows from the departamento table that match the criteria ''.
	 */
	public Departamento[] findAll() throws DepartamentoDaoException;

	/** 
	 * Returns all rows from the departamento table that match the criteria 'idDEPARTAMENTO = :idDEPARTAMENTO'.
	 */
	public Departamento[] findWhereIdDEPARTAMENTOEquals(int idDEPARTAMENTO) throws DepartamentoDaoException;

	/** 
	 * Returns all rows from the departamento table that match the criteria 'NOMBRE_DEPARAMENTO = :nombreDeparamento'.
	 */
	public Departamento[] findWhereNombreDeparamentoEquals(String nombreDeparamento) throws DepartamentoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the departamento table that match the specified arbitrary SQL statement
	 */
	public Departamento[] findByDynamicSelect(String sql, Object[] sqlParams) throws DepartamentoDaoException;

	/** 
	 * Returns all rows from the departamento table that match the specified arbitrary SQL statement
	 */
	public Departamento[] findByDynamicWhere(String sql, Object[] sqlParams) throws DepartamentoDaoException;

}
