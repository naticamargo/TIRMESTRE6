/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.dao;

import edu.co.sena.dto.*;
import edu.co.sena.exceptions.*;

public interface DomicilioDao
{
	/** 
	 * Inserts a new row in the domicilio table.
	 */
	public DomicilioPk insert(Domicilio dto) throws DomicilioDaoException;

	/** 
	 * Updates a single row in the domicilio table.
	 */
	public void update(DomicilioPk pk, Domicilio dto) throws DomicilioDaoException;

	/** 
	 * Deletes a single row in the domicilio table.
	 */
	public void delete(DomicilioPk pk) throws DomicilioDaoException;

	/** 
	 * Returns the rows from the domicilio table that matches the specified primary-key value.
	 */
	public Domicilio findByPrimaryKey(DomicilioPk pk) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'idDOMICILIO = :idDOMICILIO'.
	 */
	public Domicilio findByPrimaryKey(int idDOMICILIO) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria ''.
	 */
	public Domicilio[] findAll() throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'CUENTA_TIPO_DOCUMENTO = :cuentaTipoDocumento AND CUENTA_NUMERO_DOCUMENTO = :cuentaNumeroDocumento'.
	 */
	public Domicilio[] findByCuenta(String cuentaTipoDocumento, String cuentaNumeroDocumento) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'MUNICIPIO_idMUNICIPIO = :municipioIdmunicipio'.
	 */
	public Domicilio[] findByMunicipio(int municipioIdmunicipio) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'idDOMICILIO = :idDOMICILIO'.
	 */
	public Domicilio[] findWhereIdDOMICILIOEquals(int idDOMICILIO) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'DIRRECION = :dirrecion'.
	 */
	public Domicilio[] findWhereDirrecionEquals(String dirrecion) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'TELEFONO = :telefono'.
	 */
	public Domicilio[] findWhereTelefonoEquals(String telefono) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'LOCALIDAD = :localidad'.
	 */
	public Domicilio[] findWhereLocalidadEquals(String localidad) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'BARRIO = :barrio'.
	 */
	public Domicilio[] findWhereBarrioEquals(String barrio) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'CUENTA_TIPO_DOCUMENTO = :cuentaTipoDocumento'.
	 */
	public Domicilio[] findWhereCuentaTipoDocumentoEquals(String cuentaTipoDocumento) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'CUENTA_NUMERO_DOCUMENTO = :cuentaNumeroDocumento'.
	 */
	public Domicilio[] findWhereCuentaNumeroDocumentoEquals(String cuentaNumeroDocumento) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'MUNICIPIO_idMUNICIPIO = :municipioIdmunicipio'.
	 */
	public Domicilio[] findWhereMunicipioIdmunicipioEquals(int municipioIdmunicipio) throws DomicilioDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the domicilio table that match the specified arbitrary SQL statement
	 */
	public Domicilio[] findByDynamicSelect(String sql, Object[] sqlParams) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the specified arbitrary SQL statement
	 */
	public Domicilio[] findByDynamicWhere(String sql, Object[] sqlParams) throws DomicilioDaoException;

}
