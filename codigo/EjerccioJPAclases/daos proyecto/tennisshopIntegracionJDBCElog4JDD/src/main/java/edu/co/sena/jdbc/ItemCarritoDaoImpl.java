/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.jdbc;

import edu.co.sena.dao.*;
import edu.co.sena.factory.*;
import edu.co.sena.dto.*;
import edu.co.sena.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ItemCarritoDaoImpl extends AbstractDAO implements ItemCarritoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ItemCarritoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT CANTIDAD, VALOR_UNITARIO, VALOR_TOTAL, PRODUCTO_ID_PRODUCTO, CARRITO_COMPRAS_idCARRITO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( CANTIDAD, VALOR_UNITARIO, VALOR_TOTAL, PRODUCTO_ID_PRODUCTO, CARRITO_COMPRAS_idCARRITO ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET CANTIDAD = ?, VALOR_UNITARIO = ?, VALOR_TOTAL = ?, PRODUCTO_ID_PRODUCTO = ?, CARRITO_COMPRAS_idCARRITO = ? WHERE PRODUCTO_ID_PRODUCTO = ? AND CARRITO_COMPRAS_idCARRITO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE PRODUCTO_ID_PRODUCTO = ? AND CARRITO_COMPRAS_idCARRITO = ?";

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 1;

	/** 
	 * Index of column VALOR_UNITARIO
	 */
	protected static final int COLUMN_VALOR_UNITARIO = 2;

	/** 
	 * Index of column VALOR_TOTAL
	 */
	protected static final int COLUMN_VALOR_TOTAL = 3;

	/** 
	 * Index of column PRODUCTO_ID_PRODUCTO
	 */
	protected static final int COLUMN_PRODUCTO_ID_PRODUCTO = 4;

	/** 
	 * Index of column CARRITO_COMPRAS_idCARRITO
	 */
	protected static final int COLUMN_CARRITO_COMPRAS_IDCARRITO = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column PRODUCTO_ID_PRODUCTO
	 */
	protected static final int PK_COLUMN_PRODUCTO_ID_PRODUCTO = 1;

	/** 
	 * Index of primary-key column CARRITO_COMPRAS_idCARRITO
	 */
	protected static final int PK_COLUMN_CARRITO_COMPRAS_IDCARRITO = 2;

	/** 
	 * Inserts a new row in the item_carrito table.
	 */
	public ItemCarritoPk insert(ItemCarrito dto) throws ItemCarritoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isValorUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "VALOR_UNITARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isValorTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "VALOR_TOTAL" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isProductoIdProductoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRODUCTO_ID_PRODUCTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCarritoComprasIdcarritoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CARRITO_COMPRAS_idCARRITO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isCantidadModified()) {
				stmt.setInt( index++, dto.getCantidad() );
			}
		
			if (dto.isValorUnitarioModified()) {
				stmt.setFloat( index++, dto.getValorUnitario() );
			}
		
			if (dto.isValorTotalModified()) {
				stmt.setFloat( index++, dto.getValorTotal() );
			}
		
			if (dto.isProductoIdProductoModified()) {
				stmt.setString( index++, dto.getProductoIdProducto() );
			}
		
			if (dto.isCarritoComprasIdcarritoModified()) {
				stmt.setString( index++, dto.getCarritoComprasIdcarrito() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the item_carrito table.
	 */
	public void update(ItemCarritoPk pk, ItemCarrito dto) throws ItemCarritoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isValorUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "VALOR_UNITARIO=?" );
				modified=true;
			}
		
			if (dto.isValorTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "VALOR_TOTAL=?" );
				modified=true;
			}
		
			if (dto.isProductoIdProductoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRODUCTO_ID_PRODUCTO=?" );
				modified=true;
			}
		
			if (dto.isCarritoComprasIdcarritoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CARRITO_COMPRAS_idCARRITO=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE PRODUCTO_ID_PRODUCTO=? AND CARRITO_COMPRAS_idCARRITO=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isCantidadModified()) {
				stmt.setInt( index++, dto.getCantidad() );
			}
		
			if (dto.isValorUnitarioModified()) {
				stmt.setFloat( index++, dto.getValorUnitario() );
			}
		
			if (dto.isValorTotalModified()) {
				stmt.setFloat( index++, dto.getValorTotal() );
			}
		
			if (dto.isProductoIdProductoModified()) {
				stmt.setString( index++, dto.getProductoIdProducto() );
			}
		
			if (dto.isCarritoComprasIdcarritoModified()) {
				stmt.setString( index++, dto.getCarritoComprasIdcarrito() );
			}
		
			stmt.setString( index++, pk.getProductoIdProducto() );
			stmt.setString( index++, pk.getCarritoComprasIdcarrito() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the item_carrito table.
	 */
	public void delete(ItemCarritoPk pk) throws ItemCarritoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getProductoIdProducto() );
			stmt.setString( 2, pk.getCarritoComprasIdcarrito() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the item_carrito table that matches the specified primary-key value.
	 */
	public ItemCarrito findByPrimaryKey(ItemCarritoPk pk) throws ItemCarritoDaoException
	{
		return findByPrimaryKey( pk.getProductoIdProducto(), pk.getCarritoComprasIdcarrito() );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto AND CARRITO_COMPRAS_idCARRITO = :carritoComprasIdcarrito'.
	 */
	public ItemCarrito findByPrimaryKey(String productoIdProducto, String carritoComprasIdcarrito) throws ItemCarritoDaoException
	{
		ItemCarrito ret[] = findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTO_ID_PRODUCTO = ? AND CARRITO_COMPRAS_idCARRITO = ?", new Object[] { productoIdProducto, carritoComprasIdcarrito } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria ''.
	 */
	public ItemCarrito[] findAll() throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY PRODUCTO_ID_PRODUCTO, CARRITO_COMPRAS_idCARRITO", null );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto'.
	 */
	public ItemCarrito[] findByProducto(String productoIdProducto) throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTO_ID_PRODUCTO = ?", new Object[] { productoIdProducto } );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'CARRITO_COMPRAS_idCARRITO = :carritoComprasIdcarrito'.
	 */
	public ItemCarrito[] findByCarritoCompras(String carritoComprasIdcarrito) throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARRITO_COMPRAS_idCARRITO = ?", new Object[] { carritoComprasIdcarrito } );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public ItemCarrito[] findWhereCantidadEquals(int cantidad) throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Integer(cantidad) } );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'VALOR_UNITARIO = :valorUnitario'.
	 */
	public ItemCarrito[] findWhereValorUnitarioEquals(float valorUnitario) throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VALOR_UNITARIO = ? ORDER BY VALOR_UNITARIO", new Object[] {  new Float(valorUnitario) } );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'VALOR_TOTAL = :valorTotal'.
	 */
	public ItemCarrito[] findWhereValorTotalEquals(float valorTotal) throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VALOR_TOTAL = ? ORDER BY VALOR_TOTAL", new Object[] {  new Float(valorTotal) } );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'PRODUCTO_ID_PRODUCTO = :productoIdProducto'.
	 */
	public ItemCarrito[] findWhereProductoIdProductoEquals(String productoIdProducto) throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTO_ID_PRODUCTO = ? ORDER BY PRODUCTO_ID_PRODUCTO", new Object[] { productoIdProducto } );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the criteria 'CARRITO_COMPRAS_idCARRITO = :carritoComprasIdcarrito'.
	 */
	public ItemCarrito[] findWhereCarritoComprasIdcarritoEquals(String carritoComprasIdcarrito) throws ItemCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CARRITO_COMPRAS_idCARRITO = ? ORDER BY CARRITO_COMPRAS_idCARRITO", new Object[] { carritoComprasIdcarrito } );
	}

	/**
	 * Method 'ItemCarritoDaoImpl'
	 * 
	 */
	public ItemCarritoDaoImpl()
	{
	}

	/**
	 * Method 'ItemCarritoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ItemCarritoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "tennisshop.item_carrito";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ItemCarrito fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ItemCarrito dto = new ItemCarrito();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ItemCarrito[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ItemCarrito dto = new ItemCarrito();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ItemCarrito ret[] = new ItemCarrito[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ItemCarrito dto, ResultSet rs) throws SQLException
	{
		dto.setCantidad( rs.getInt( COLUMN_CANTIDAD ) );
		dto.setValorUnitario( rs.getFloat( COLUMN_VALOR_UNITARIO ) );
		dto.setValorTotal( rs.getFloat( COLUMN_VALOR_TOTAL ) );
		dto.setProductoIdProducto( rs.getString( COLUMN_PRODUCTO_ID_PRODUCTO ) );
		dto.setCarritoComprasIdcarrito( rs.getString( COLUMN_CARRITO_COMPRAS_IDCARRITO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ItemCarrito dto)
	{
		dto.setCantidadModified( false );
		dto.setValorUnitarioModified( false );
		dto.setValorTotalModified( false );
		dto.setProductoIdProductoModified( false );
		dto.setCarritoComprasIdcarritoModified( false );
	}

	/** 
	 * Returns all rows from the item_carrito table that match the specified arbitrary SQL statement
	 */
	public ItemCarrito[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemCarritoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the item_carrito table that match the specified arbitrary SQL statement
	 */
	public ItemCarrito[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemCarritoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
